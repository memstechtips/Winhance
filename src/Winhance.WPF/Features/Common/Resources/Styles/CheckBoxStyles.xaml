<!-- src/Winhance.WPF/Resources/Styles/CheckBoxStyles.xaml -->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:converters="clr-namespace:Winhance.WPF.Features.Common.Converters">
    
    <!--
    Custom CheckBox Style
    
    This style uses the generic control resources (ControlForeground, ControlFillColor, ControlBorderBrush)
    for consistent theming across different UI elements. These resources are shared with
    other controls like toggle switches to maintain a consistent look and feel throughout
    the application.
    -->
    <!-- Converters for parent element detection and hover states -->
    <converters:FindAncestorConverter x:Key="FindAncestorConverter" />
    <converters:ParentHoverConverter x:Key="ParentHoverConverter" />
    
    <Style x:Key="CustomCheckBox" TargetType="CheckBox">
        <Setter Property="Foreground" Value="{DynamicResource ControlForeground}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlBorderBrush}"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Border x:Name="CheckBoxBorder" 
                                Width="20" Height="20" 
                                BorderThickness="1"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}"
                                CornerRadius="3">
                            <Grid>
                                <Border x:Name="InnerFill"
                                        Margin="2"
                                        Background="Transparent"
                                        CornerRadius="1"/>
                                <TextBlock x:Name="CheckMark"
                                           Text="&#xE5CA;"
                                           FontFamily="pack://application:,,,/Resources/Fonts/#Material Symbols Outlined"
                                           Foreground="{DynamicResource ButtonHoverTextColor}"
                                           FontSize="16"
                                           FontWeight="Bold"
                                           HorizontalAlignment="Center"
                                           VerticalAlignment="Center"
                                           Visibility="Collapsed"/>
                            </Grid>
                        </Border>
                        <ContentPresenter Grid.Column="1"
                                        Margin="6,0,0,0"
                                        VerticalAlignment="Center"
                                        HorizontalAlignment="Left"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="InnerFill" 
                                    Property="Background" 
                                    Value="{DynamicResource ControlFillColor}"/>
                            <Setter TargetName="CheckMark" 
                                    Property="Visibility" 
                                    Value="Visible"/>
                        </Trigger>
                        <!-- Removed direct hover effect as requested -->
                        <DataTrigger>
                            <DataTrigger.Binding>
                                <MultiBinding Converter="{StaticResource ParentHoverConverter}">
                                    <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}" Path="IsMouseOver" FallbackValue="False" />
                                    <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type GridViewColumnHeader}}" Path="IsMouseOver" FallbackValue="False" />
                                </MultiBinding>
                            </DataTrigger.Binding>
                            <DataTrigger.Value>True</DataTrigger.Value>
                            <Setter TargetName="CheckBoxBorder" 
                                    Property="BorderBrush" 
                                    Value="{DynamicResource ButtonHoverTextColor}"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>