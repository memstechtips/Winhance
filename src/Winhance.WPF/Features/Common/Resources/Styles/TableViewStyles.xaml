<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:converters="clr-namespace:Winhance.WPF.Features.Common.Converters">

    <!-- Base style for GridView column headers that works with both themes -->
    <Style x:Key="ThemedGridViewColumnHeader" TargetType="{x:Type GridViewColumnHeader}">
        <Setter Property="Background" Value="{DynamicResource ContentSectionBackground}" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColor}" />
        <Setter Property="Padding" Value="4" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="FontSize" Value="18" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="BorderBrush" Value="#505050" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ButtonHoverBackground}"/>
                            <Setter Property="Foreground" Value="{DynamicResource ButtonHoverTextColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- First column header style with left rounded corners -->
    <Style x:Key="FirstColumnHeader" TargetType="{x:Type GridViewColumnHeader}" BasedOn="{StaticResource ThemedGridViewColumnHeader}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                    <Border BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" CornerRadius="4,0,0,4">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ButtonHoverBackground}"/>
                            <Setter Property="Foreground" Value="{DynamicResource ButtonHoverTextColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style for the last column header with right rounded corners -->
    <Style x:Key="LastColumnHeader" TargetType="{x:Type GridViewColumnHeader}" BasedOn="{StaticResource ThemedGridViewColumnHeader}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                    <Border x:Name="HeaderBorder" CornerRadius="0,4,4,0" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" Margin="0,0,1,0">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" TextElement.FontSize="18" TextElement.FontWeight="SemiBold" Margin="{TemplateBinding Padding}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ButtonHoverBackground}"/>
                            <Setter Property="Foreground" Value="{DynamicResource ButtonHoverTextColor}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style for ListView that works with both themes -->
    <Style x:Key="ThemedListView" TargetType="{x:Type ListView}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColor}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0,0,4,4">
                        <ScrollViewer Padding="{TemplateBinding Padding}" Style="{DynamicResource ModernScrollViewer}">
                            <DockPanel>
                                <GridViewHeaderRowPresenter DockPanel.Dock="Top" Columns="{Binding Path=View.Columns, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}" ColumnHeaderContainerStyle="{StaticResource ThemedGridViewColumnHeader}"/>
                                <ItemsPresenter />
                            </DockPanel>
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Style for GridView to make columns stretch to fill available width -->
    <Style x:Key="StretchedColumnGridViewHeader" TargetType="{x:Type GridViewColumnHeader}" BasedOn="{StaticResource ThemedGridViewColumnHeader}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    </Style>

    <!-- Converter to detect parent ListViewItem hover state -->
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />

    <!-- Style for ListView items that works with both themes -->
    <Style x:Key="ThemedListViewItem" TargetType="{x:Type ListViewItem}">
        <Setter Property="Foreground" Value="{DynamicResource PrimaryTextColor}" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="8" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border x:Name="ItemBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <GridViewRowPresenter Content="{TemplateBinding Content}" Columns="{TemplateBinding GridView.ColumnCollection}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource ButtonHoverBackground}"/>
                            <Setter Property="Foreground" Value="{DynamicResource ButtonHoverTextColor}"/>
                            <Setter Property="Tag" Value="True"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter Property="Tag" Value="False"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{DynamicResource PrimaryHueLightBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource PrimaryHueLightForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
