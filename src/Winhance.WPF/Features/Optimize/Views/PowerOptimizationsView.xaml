<UserControl x:Class="Winhance.WPF.Features.Optimize.Views.PowerOptimizationsView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:Winhance.WPF.Features.Optimize.Views"
    xmlns:viewModels="clr-namespace:Winhance.WPF.Features.Optimize.ViewModels"
    xmlns:powerConverters="clr-namespace:Winhance.WPF.Features.Optimize.Converters"
    xmlns:controls="clr-namespace:Winhance.WPF.Features.Common.Controls"
    xmlns:behaviors="clr-namespace:Winhance.WPF.Features.Common.Behaviors"
    xmlns:converters="clr-namespace:Winhance.WPF.Features.Common.Converters"
    xmlns:models="clr-namespace:Winhance.Core.Features.Optimize.Models;assembly=Winhance.Core" mc:Ignorable="d" d:DesignHeight="450" d:DesignWidth="800" d:DataContext="{d:DesignInstance Type=viewModels:PowerOptimizationsViewModel}">

    <UserControl.Resources>
        <BooleanToVisibilityConverter x:Key="BoolToVisibilityConverter" />
        <converters:InverseBooleanToVisibilityConverter x:Key="InverseBoolToVisibilityConverter" />
        <converters:BoolToExpandCollapseConverter x:Key="BoolToExpandCollapseConverter" />

        <!-- Power Setting Type enum values -->
        <models:PowerSettingType x:Key="EnumType">Enum</models:PowerSettingType>
        <models:PowerSettingType x:Key="NumericType">Numeric</models:PowerSettingType>

        <!-- Converter for power setting types -->
        <converters:EnumMatchToVisibilityConverter x:Key="EnumTypeToVisibilityConverter" MatchValue="{StaticResource EnumType}" />
        <converters:EnumMatchToVisibilityConverter x:Key="NumericTypeToVisibilityConverter" MatchValue="{StaticResource NumericType}" />
    </UserControl.Resources>

    <Border Background="{DynamicResource ContentSectionBorderBrush}" CornerRadius="5" Margin="5,0,5,5" Effect="{StaticResource LightShadowEffect}">
        <StackPanel Margin="0,10,0,10">
            <!-- Power Plan Slider -->
            <Grid Margin="10,0,10,20">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <!-- Title -->
                <TextBlock Text="Power Plan" FontSize="16" Foreground="{DynamicResource PrimaryTextColor}" FontWeight="SemiBold" Margin="25,0,0,0"/>

                <!-- Power Plan -->
                <Grid Grid.Row="1" Margin="25,0,25,0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>

                    <!-- Left: Description -->
                    <TextBlock Text="Select a power plan for your system" Foreground="{DynamicResource PrimaryTextColor}" VerticalAlignment="Center"/>

                    <!-- Right: ComboBox -->
                    <StackPanel Grid.Column="1" Margin="10,0,0,0">
                        <ComboBox ItemsSource="{Binding PowerPlanLabels}" SelectedIndex="{Binding PowerPlanValue, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="200" HorizontalAlignment="Right" VerticalAlignment="Center"/>
                    </StackPanel>
                </Grid>

                <!-- Loading Spinner -->
                <ProgressBar Grid.Row="1" HorizontalAlignment="Right" Margin="0,0,10,0" IsIndeterminate="True" Width="20" Height="20" Visibility="{Binding IsApplyingPowerPlan, Converter={StaticResource BooleanToVisibilityConverter}}"/>
            </Grid> 

            <!-- Advanced Power Settings -->
            <Grid Margin="10,0,10,10">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <TextBlock Text="Advanced Power Settings" FontSize="16" Foreground="{DynamicResource PrimaryTextColor}" FontWeight="SemiBold" Margin="25,0,0,0" VerticalAlignment="Center"/>
            </Grid>

            <!-- Separator -->
            <Separator Margin="25,0,25,20"/>

            <!-- Advanced Power Settings Panel -->
            <Border BorderThickness="0,1,0,0" BorderBrush="{DynamicResource BorderBrush}" Margin="35,0,35,20">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>

                    <!-- Spacing -->
                    <Grid Margin="0,10,0,10">
                    </Grid>

                    <!-- Loading Indicator -->
                    <Grid Grid.Row="1" Visibility="{Binding IsLoadingAdvancedSettings, Converter={StaticResource BoolToVisibilityConverter}}">
                        <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                            <ProgressBar IsIndeterminate="True" Width="100" Height="10" Margin="0,0,0,10"/>
                            <TextBlock Text="Loading advanced power settings..." Foreground="{DynamicResource SecondaryTextColor}" HorizontalAlignment="Center"/>
                        </StackPanel>
                    </Grid>

                    <!-- Advanced Settings Groups -->
                    <Grid>
                        <TextBlock Text="No advanced power settings found" Foreground="{DynamicResource SecondaryTextColor}" HorizontalAlignment="Center" Margin="0,20,0,0" Visibility="{Binding HasAdvancedPowerSettings, Converter={StaticResource InverseBoolToVisibilityConverter}}"/>
                        <!-- Flattened ItemsControl that combines all settings from all groups -->
                        <ItemsControl ItemsSource="{Binding AdvancedPowerSettingGroups}" Visibility="{Binding HasAdvancedPowerSettings, Converter={StaticResource BoolToVisibilityConverter}}">
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <ItemsControl ItemsSource="{Binding Settings}">
                                        <ItemsControl.ItemTemplate>
                                            <DataTemplate>
                                                <Grid Margin="0,5">
                                                    <Grid.ColumnDefinitions>
                                                        <ColumnDefinition Width="*"/>
                                                        <ColumnDefinition Width="Auto"/>
                                                        <ColumnDefinition Width="Auto"/>
                                                    </Grid.ColumnDefinitions>
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition Height="Auto"/>
                                                        <RowDefinition Height="Auto"/>
                                                    </Grid.RowDefinitions>

                                                    <!-- Setting Name and Description -->
                                                    <StackPanel>
                                                        <TextBlock Text="{Binding DisplayName}" Foreground="{DynamicResource PrimaryTextColor}" FontWeight="Medium" FontSize="14"/>
                                                        <TextBlock Text="{Binding Description}" Foreground="{DynamicResource SecondaryTextColor}" TextWrapping="Wrap" Margin="0,2,0,0"/>
                                                    </StackPanel>

                                                    <!-- AC Value Control -->
                                                    <StackPanel Grid.Column="1" Margin="10,0">
                                                        <TextBlock Text="AC Power" Foreground="{DynamicResource SecondaryTextColor}" HorizontalAlignment="Center" Margin="0,0,0,2"/>

                                                        <!-- Enum Type Settings (ComboBox) -->
                                                        <ComboBox Width="120" Visibility="{Binding SettingType, Converter={StaticResource EnumTypeToVisibilityConverter}}" ItemsSource="{Binding PossibleValues}" DisplayMemberPath="FriendlyName" SelectedValue="{Binding AcValue, Mode=TwoWay}" SelectedValuePath="Index" behaviors:ComboBoxDropdownBehavior.StayWithParent="True"/>

                                                        <!-- Numeric Type Settings (ComboBox for time intervals or NumericUpDown) -->
                                                        <StackPanel Visibility="{Binding SettingType, Converter={StaticResource NumericTypeToVisibilityConverter}}">
                                                            <!-- Time Interval ComboBox -->
                                                            <ComboBox Width="120" Visibility="{Binding UseTimeIntervals, Converter={StaticResource BoolToVisibilityConverter}}" ItemsSource="{Binding TimeValues}" DisplayMemberPath="DisplayName" SelectedValue="{Binding AcValue, Mode=TwoWay}" SelectedValuePath="Minutes" behaviors:ComboBoxDropdownBehavior.StayWithParent="True"/>

                                                            <!-- NumericUpDown for other numeric settings -->
                                                            <controls:NumericUpDown Width="120" Visibility="{Binding UseTimeIntervals, Converter={StaticResource InverseBooleanToVisibilityConverter}}" Minimum="{Binding MinValue}" Maximum="{Binding MaxValue}" Value="{Binding AcValue, Mode=TwoWay}" Increment="{Binding Increment}" Units="{Binding Units}"/>
                                                        </StackPanel>
                                                    </StackPanel>

                                                    <!-- DC Value Control -->
                                                    <StackPanel Grid.Column="2" Visibility="{Binding DataContext.HasBattery, RelativeSource={RelativeSource AncestorType=UserControl}, Converter={StaticResource BoolToVisibilityConverter}}">
                                                        <TextBlock Text="Battery" Foreground="{DynamicResource SecondaryTextColor}" HorizontalAlignment="Center" Margin="0,0,0,2"/>

                                                        <!-- Enum Type Settings (ComboBox) -->
                                                        <ComboBox Width="120" Visibility="{Binding SettingType, Converter={StaticResource EnumTypeToVisibilityConverter}}" ItemsSource="{Binding PossibleValues}" DisplayMemberPath="FriendlyName" SelectedValue="{Binding DcValue, Mode=TwoWay}" SelectedValuePath="Index" behaviors:ComboBoxDropdownBehavior.StayWithParent="True"/>

                                                        <!-- Numeric Type Settings (ComboBox for time intervals or NumericUpDown) -->
                                                        <StackPanel Visibility="{Binding SettingType, Converter={StaticResource NumericTypeToVisibilityConverter}}">
                                                            <!-- Time Interval ComboBox -->
                                                            <ComboBox Width="120" Visibility="{Binding UseTimeIntervals, Converter={StaticResource BoolToVisibilityConverter}}" ItemsSource="{Binding TimeValues}" DisplayMemberPath="DisplayName" SelectedValue="{Binding DcValue, Mode=TwoWay}" SelectedValuePath="Minutes" behaviors:ComboBoxDropdownBehavior.StayWithParent="True"/>

                                                            <!-- NumericUpDown for other numeric settings -->
                                                            <controls:NumericUpDown Width="120" Visibility="{Binding UseTimeIntervals, Converter={StaticResource InverseBooleanToVisibilityConverter}}" Minimum="{Binding MinValue}" Maximum="{Binding MaxValue}" Value="{Binding DcValue, Mode=TwoWay}" Increment="{Binding Increment}" Units="{Binding Units}"/>
                                                        </StackPanel>
                                                    </StackPanel>
                                                </Grid>
                                            </DataTemplate>
                                        </ItemsControl.ItemTemplate>
                                    </ItemsControl>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </Grid>
                </Grid>
            </Border>

            <!-- Container for Setting Labels & Toggles -->
            <ItemsControl x:Name="PowerSettingsItemsControl" ItemsSource="{Binding Settings}">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <WrapPanel Orientation="Horizontal" HorizontalAlignment="Left"/>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
                <ItemsControl.ItemContainerStyle>
                    <Style BasedOn="{StaticResource ResponsiveItemContainerStyle}" TargetType="FrameworkElement">
                        <Setter Property="Grid.ColumnSpan" Value="{Binding IsGroupHeader, Converter={StaticResource BooleanToGridSpanConverter}}"/>
                        <Setter Property="Width" Value="0"/>
                        <Setter Property="Margin" Value="0,0,0,0"/>
                    </Style>
                </ItemsControl.ItemContainerStyle>
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <!-- Group header template -->
                        <Grid>
                            <TextBlock Text="{Binding Name}" Foreground="{DynamicResource PrimaryTextColor}" FontWeight="SemiBold" Margin="25,15,0,5" Visibility="{Binding IsGroupHeader, Converter={StaticResource BooleanToVisibilityConverter}}"/>

                            <!-- Setting Labels & Toggles -->
                            <StackPanel Orientation="Horizontal" Visibility="{Binding IsVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                                <ToggleButton Style="{StaticResource MaterialToggleSwitch}" IsChecked="{Binding IsSelected}" Margin="15,3,0,3" HorizontalAlignment="Left" VerticalAlignment="Center" Content="">
                                    <ToggleButton.ToolTip>
                                        <ToolTip>
                                            <ContentPresenter Content="{Binding}" ContentTemplate="{StaticResource RegistrySettingTooltipTemplate}"/>
                                        </ToolTip>
                                    </ToggleButton.ToolTip>
                                </ToggleButton>
                                <TextBlock Text="{Binding FullName}" Style="{StaticResource AppItemTextStyle}" VerticalAlignment="Center">
                                    <TextBlock.ToolTip>
                                        <ToolTip>
                                            <ContentPresenter Content="{Binding}" ContentTemplate="{StaticResource RegistrySettingTooltipTemplate}"/>
                                        </ToolTip>
                                    </TextBlock.ToolTip>
                                </TextBlock>

                                <!-- Warning Icon (visible only when registry value is null) -->
                                <TextBlock Text="&#xEA76;" FontFamily="{StaticResource MaterialSymbolsFont}" FontSize="18" Foreground="#FF2800" Margin="5,5,0,0" VerticalAlignment="Center" Visibility="{Binding IsRegistryValueNull, Converter={StaticResource BooleanToVisibilityConverter}}">
                                    <TextBlock.ToolTip>
                                        <ToolTip>
                                            <TextBlock TextWrapping="Wrap" MaxWidth="300">
                                                Registry key or value doesn't exist and Windows is using default settings.<LineBreak/>
                                                Recommendation: Toggle setting to desired state to set explicitly or ignore if you want to continue using Windows default settings.
                                            </TextBlock>
                                        </ToolTip>
                                    </TextBlock.ToolTip>
                                </TextBlock>
                            </StackPanel>
                        </Grid>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </StackPanel>
    </Border>
</UserControl>
