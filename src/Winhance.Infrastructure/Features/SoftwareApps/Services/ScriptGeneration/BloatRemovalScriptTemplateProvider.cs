using System;
using Winhance.Core.Features.Common.Interfaces;
using Winhance.Core.Features.SoftwareApps.Interfaces.ScriptGeneration;

namespace Winhance.Infrastructure.Features.SoftwareApps.Services.ScriptGeneration
{
    /// <summary>
    /// Provides PowerShell script templates with OS-specific adjustments.
    /// </summary>
    public class BloatRemovalScriptTemplateProvider : IBloatRemovalScriptTemplateProvider
    {
        private readonly ISystemServices _systemService;
        private readonly ILogService _logService;

        /// <summary>
        /// Initializes a new instance of the <see cref="BloatRemovalScriptTemplateProvider"/> class.
        /// </summary>
        /// <param name="systemService">The system service.</param>
        /// <param name="logService">The logging service.</param>
        public BloatRemovalScriptTemplateProvider(
            ISystemServices systemService,
            ILogService logService
        )
        {
            _systemService =
                systemService ?? throw new ArgumentNullException(nameof(systemService));
            _logService = logService ?? throw new ArgumentNullException(nameof(logService));
        }

        /// <inheritdoc/>
        public string GetFullScriptTemplate()
        {
            return @"# BloatRemoval.ps1
# This script removes Windows bloatware apps and prevents them from reinstalling
# Source: Winhance (https://github.com/memstechtips/Winhance)
# Generated by Winhance on " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + @"

# Setup logging
$logFolder = ""$env:LOCALAPPDATA\Winhance\Logs""
$logFile = ""$logFolder\BloatRemovalLog.txt""

# Create log directory if it doesn't exist
if (!(Test-Path $logFolder)) {
    New-Item -ItemType Directory -Path $logFolder -Force | Out-Null
}

# Function to write to log file
function Write-Log {
    param (
        [string]$Message
    )
    
    $timestamp = Get-Date -Format ""yyyy-MM-dd HH:mm:ss""
    ""$timestamp - $Message"" | Out-File -FilePath $logFile -Append
}

Write-Log ""Starting bloat removal process""

# Packages to remove
$packages = @(
)

# Capabilities to remove
$capabilities = @(
)

# Optional Features to disable
$optionalFeatures = @(
)

# Process Packages
Write-Log ""Processing packages...""
foreach ($package in $packages) {
    Write-Log ""Checking package: $package""
    
    # Check for installed packages
    $installedPackages = Get-AppxPackage -AllUsers -Name $package -ErrorAction SilentlyContinue
    if ($installedPackages) {
        Write-Log ""Found installed package: $package""
        $installedPackages | ForEach-Object {
            Write-Log ""Removing installed package: $($_.PackageFullName)""
            Remove-AppxPackage -Package $_.PackageFullName -ErrorAction SilentlyContinue
        }
    }
    else {
        Write-Log ""No installed packages found for: $package""
    }
    
    # Check for provisioned packages
    $provisionedPackages = Get-AppxProvisionedPackage -Online | Where-Object { $_.DisplayName -eq $package }
    if ($provisionedPackages) {
        Write-Log ""Found provisioned package: $package""
        $provisionedPackages | ForEach-Object {
            Write-Log ""Removing provisioned package: $($_.PackageName)""
            Remove-AppxProvisionedPackage -Online -PackageName $_.PackageName -ErrorAction SilentlyContinue
        }
    }
    else {
        Write-Log ""No provisioned packages found for: $package""
    }
}

# Process Capabilities
Write-Log ""Processing capabilities...""
foreach ($capability in $capabilities) {
    Write-Log ""Checking capability: $capability""
    try {
        # Get capabilities matching the pattern
        $matchingCapabilities = Get-WindowsCapability -Online | Where-Object { $_.Name -like ""$capability*"" -or $_.Name -like ""$capability~~~~*"" }
        
        if ($matchingCapabilities) {
            $foundInstalled = $false
            foreach ($existingCapability in $matchingCapabilities) {
                if ($existingCapability.State -eq ""Installed"") {
                    $foundInstalled = $true
                    Write-Log ""Removing capability: $($existingCapability.Name)""
                    Remove-WindowsCapability -Online -Name $existingCapability.Name -ErrorAction SilentlyContinue | Out-Null
                }
            }
            
            if (-not $foundInstalled) {
                Write-Log ""Found capability $capability but it is not installed""
            }
        }
        else {
            Write-Log ""No matching capabilities found for: $capability""
        }
    }
    catch {
        Write-Log ""Error checking capability: $capability - $($_.Exception.Message)""
    }
}

# Process Optional Features
Write-Log ""Processing optional features...""
foreach ($feature in $optionalFeatures) {
    Write-Log ""Checking feature: $feature""
    $existingFeature = Get-WindowsOptionalFeature -Online -FeatureName $feature -ErrorAction SilentlyContinue
    if ($existingFeature -and $existingFeature.State -eq ""Enabled"") {
        Write-Log ""Disabling feature: $feature""
        Disable-WindowsOptionalFeature -Online -FeatureName $feature -NoRestart -ErrorAction SilentlyContinue | Out-Null
    }
    else {
        Write-Log ""Feature not found or not enabled: $feature""
    }
}

Write-Log ""Bloat removal process completed""
";
        }
    }
}
