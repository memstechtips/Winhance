using System;

namespace Winhance.Core.Features.SoftwareApps.Models;

/// <summary>
/// Provides the PowerShell script content for removing OneDrive.
/// </summary>
public static class OneDriveRemovalScript
{
    /// <summary>
    /// Gets the PowerShell script for removing OneDrive.
    /// </summary>
    /// <returns>A string containing the PowerShell script.</returns>
    public static string GetScript()
    {
        return @"
# OneDriveRemoval.ps1
# Standalone script to remove Microsoft OneDrive
# Source: Winhance (https://github.com/memstechtips/Winhance)

# Generated by Winhance on "
            + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")
            + @"

# Setup logging
$logFolder = ""$env:LOCALAPPDATA\Winhance\Logs""
$logFile = ""$logFolder\OneDriveRemovalLog.txt""

# Create log directory if it doesn't exist
if (!(Test-Path $logFolder)) {
    New-Item -ItemType Directory -Path $logFolder -Force | Out-Null
}

# Function to write to log file
function Write-Log {
    param (
        [string]$Message
    )
    
    $timestamp = Get-Date -Format ""yyyy-MM-dd HH:mm:ss""
    ""$timestamp - $Message"" | Out-File -FilePath $logFile -Append
}

Write-Log ""Starting OneDrive removal process""

try {
    # Stop OneDrive processes
    Write-Log ""Stopping OneDrive processes""
    $processesToStop = @(""OneDrive"", ""FileCoAuth"", ""FileSyncHelper"")
    foreach ($processName in $processesToStop) { 
        $processes = Get-Process -Name $processName -ErrorAction SilentlyContinue
        if ($processes) {
            $processes | Stop-Process -Force -ErrorAction SilentlyContinue
            Write-Log ""Stopped process: $processName""
        } else {
            Write-Log ""Process not running: $processName""
        }
    }
    Start-Sleep -Seconds 1
    Write-Log ""Successfully stopped all OneDrive processes""
}
catch {
    Write-Log ""Error stopping OneDrive processes: $($_.Exception.Message)""
}

# Check and execute uninstall strings from registry
Write-Log ""Checking registry for OneDrive uninstall strings""
$registryPaths = @(
    ""HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\OneDriveSetup.exe"",
    ""HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\OneDriveSetup.exe""
)

$uninstallPathsFound = 0
foreach ($regPath in $registryPaths) {
    try {
        Write-Log ""Checking registry path: $regPath""
        if (Test-Path $regPath) {
            Write-Log ""Found registry key: $regPath""
            $uninstallString = (Get-ItemProperty -Path $regPath -ErrorAction Stop).UninstallString
            if ($uninstallString) {
                Write-Log ""Found uninstall string: $uninstallString""
                $uninstallPathsFound++
                
                try {
                    if ($uninstallString -match '^\""([^\""]+)\""(.*)$') {
                        $exePath = $matches[1]
                        $args = $matches[2].Trim()
                        Write-Log ""Executing uninstaller: $exePath with args: $args""
                        Start-Process -FilePath $exePath -ArgumentList $args -NoNewWindow -Wait -ErrorAction SilentlyContinue
                        Write-Log ""Uninstaller completed execution""
                    }
                    else {
                        Write-Log ""Executing uninstaller: $uninstallString""
                        Start-Process -FilePath $uninstallString -NoNewWindow -Wait -ErrorAction SilentlyContinue
                        Write-Log ""Uninstaller completed execution""
                    }
                }
                catch {
                    Write-Log ""Error executing uninstaller: $($_.Exception.Message)""
                }
            } else {
                Write-Log ""No uninstall string found in registry key""
            }
        } else {
            Write-Log ""Registry path not found: $regPath""
        }
    }
    catch {
        Write-Log ""Error accessing registry path $regPath: $($_.Exception.Message)""
        continue
    }
}

if ($uninstallPathsFound -eq 0) {
    Write-Log ""No OneDrive uninstall strings found in registry""
} else {
    Write-Log ""Processed $uninstallPathsFound uninstall strings from registry""
}

# Remove OneDrive AppX package
Write-Log ""Removing OneDrive AppX packages""
try {
    $packages = Get-AppxPackage -Name ""*OneDrive*"" -ErrorAction SilentlyContinue
    if ($packages) {
        $packages | ForEach-Object {
            Write-Log ""Removing AppX package: $($_.Name)""
            $_ | Remove-AppxPackage -ErrorAction SilentlyContinue
        }
        Write-Log ""Successfully removed OneDrive AppX packages""
    } else {
        Write-Log ""No OneDrive AppX packages found""
    }
}
catch {
    Write-Log ""Error removing OneDrive AppX packages: $($_.Exception.Message)""
}

# Uninstall OneDrive using setup files
Write-Log ""Attempting to uninstall OneDrive using setup files""
$oneDrivePaths = @(
    ""$env:SystemRoot\SysWOW64\OneDriveSetup.exe"",
    ""$env:SystemRoot\System32\OneDriveSetup.exe"",
    ""$env:LOCALAPPDATA\Microsoft\OneDrive\OneDrive.exe""
)

$setupFound = $false
foreach ($path in $oneDrivePaths) {
    try {
        if (Test-Path $path) {
            $setupFound = $true
            Write-Log ""Found OneDrive setup at: $path""
            Write-Log ""Running OneDrive setup uninstaller""
            Start-Process -FilePath $path -ArgumentList ""/uninstall"" -NoNewWindow -Wait -ErrorAction SilentlyContinue
            Write-Log ""OneDrive setup uninstall process completed for: $path""
        }
    }
    catch {
        Write-Log ""Error running OneDrive setup uninstaller at $path: $($_.Exception.Message)""
        continue
    }
}

if (-not $setupFound) {
    Write-Log ""No OneDrive setup executables found for uninstallation""
}

# Remove OneDrive scheduled tasks
Write-Log ""Removing OneDrive scheduled tasks""
try {
    $tasks = Get-ScheduledTask -ErrorAction SilentlyContinue | 
            Where-Object { $_.TaskName -match 'OneDrive' -and $_.TaskName -ne 'OneDriveRemoval' }
    
    if ($tasks) {
        $taskCount = 0
        foreach ($task in $tasks) {
            try {
                Write-Log ""Removing scheduled task: $($task.TaskName)""
                Unregister-ScheduledTask -TaskName $task.TaskName -Confirm:$false -ErrorAction SilentlyContinue
                $taskCount++
            }
            catch {
                Write-Log ""Error removing scheduled task $($task.TaskName): $($_.Exception.Message)""
            }
        }
        Write-Log ""Removed $taskCount OneDrive scheduled tasks""
    } else {
        Write-Log ""No OneDrive scheduled tasks found""
    }
}
catch {
    Write-Log ""Error accessing scheduled tasks: $($_.Exception.Message)""
}

Write-Log ""Configuring registry settings to disable OneDrive""
try {
    # Configure registry settings
    $regPath = ""HKLM:\SOFTWARE\Policies\Microsoft\OneDrive""
    if (-not (Test-Path $regPath)) {
        Write-Log ""Creating registry path: $regPath""
        New-Item -Path $regPath -Force -ErrorAction SilentlyContinue | Out-Null
    } else {
        Write-Log ""Registry path already exists: $regPath""
    }
    
    Write-Log ""Setting KFMBlockOptIn registry value to disable OneDrive""
    Set-ItemProperty -Path $regPath -Name ""KFMBlockOptIn"" -Value 1 -Type DWord -Force -ErrorAction SilentlyContinue
    
    # Remove OneDrive from startup
    Write-Log ""Removing OneDrive from startup registry""
    $startupPath = ""HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run""
    if ((Get-ItemProperty -Path $startupPath -Name ""OneDriveSetup"" -ErrorAction SilentlyContinue)) {
        Remove-ItemProperty -Path $startupPath -Name ""OneDriveSetup"" -ErrorAction SilentlyContinue
        Write-Log ""Removed OneDrive from startup registry""
    } else {
        Write-Log ""OneDrive not found in startup registry""
    }
    
    # Remove OneDrive from Navigation Pane
    $navPanePath = ""Registry::HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace\{018D5C66-4533-4307-9B53-224DE2ED1FE6}""
    Write-Log ""Removing OneDrive from navigation pane""
    if (Test-Path $navPanePath) {
        Remove-Item -Path $navPanePath -Recurse -Force -ErrorAction SilentlyContinue
        Write-Log ""Removed OneDrive from navigation pane""
    } else {
        Write-Log ""OneDrive navigation pane entry not found""
    }
    
    Write-Log ""Registry configuration completed""
}
catch {
    Write-Log ""Error configuring registry settings: $($_.Exception.Message)""
}

# Function to handle robust folder removal
function Remove-OneDriveFolder {
    param ([string]$folderPath)
    
    if (-not (Test-Path $folderPath)) {
        Write-Log ""Folder not found, skipping: $folderPath""
        return
    }
    
    Write-Log ""Attempting to remove folder with robust method: $folderPath""
    try {
        # Stop OneDrive processes if they're running
        Write-Log ""Stopping any running OneDrive processes""
        $processes = Get-Process -Name ""OneDrive"" -ErrorAction SilentlyContinue
        if ($processes) {
            $processes | Stop-Process -Force -ErrorAction SilentlyContinue
            Write-Log ""Stopped OneDrive processes""
        }
        
        # Take ownership and grant permissions
        Write-Log ""Taking ownership of folder: $folderPath""
        $null = Start-Process ""takeown.exe"" -ArgumentList ""/F `""$folderPath`"" /R /A /D Y"" -Wait -NoNewWindow -PassThru -ErrorAction SilentlyContinue
        
        Write-Log ""Granting full permissions to administrators""
        $null = Start-Process ""icacls.exe"" -ArgumentList ""`""$folderPath`"" /grant administrators:F /T"" -Wait -NoNewWindow -PassThru -ErrorAction SilentlyContinue
        
        # Try direct removal
        Write-Log ""Attempting direct folder removal: $folderPath""
        Remove-Item -Path $folderPath -Force -Recurse -ErrorAction SilentlyContinue
        
        if (-not (Test-Path $folderPath)) {
            Write-Log ""Successfully removed folder: $folderPath""
        } else {
            Write-Log ""Direct removal failed, folder still exists: $folderPath""
            throw ""Direct removal failed""
        }
    }
    catch {
        Write-Log ""Error during direct folder removal: $($_.Exception.Message)""
        try {
            # If direct removal fails, create and execute a cleanup batch file
            Write-Log ""Creating cleanup batch file for delayed removal""
            $batchPath = ""$env:TEMP\RemoveOneDrive_$(Get-Random).bat""
            $batchContent = @""
@echo off
timeout /t 2 /nobreak > nul
takeown /F ""$folderPath"" /R /A /D Y
icacls ""$folderPath"" /grant administrators:F /T
rd /s /q ""$folderPath""
del /F /Q ""%~f0""
""@
            Set-Content -Path $batchPath -Value $batchContent -Force -ErrorAction SilentlyContinue
            Write-Log ""Executing cleanup batch file: $batchPath""
            Start-Process ""cmd.exe"" -ArgumentList ""/c $batchPath"" -WindowStyle Hidden -ErrorAction SilentlyContinue
            Write-Log ""Scheduled delayed removal of folder: $folderPath""
        }
        catch {
            Write-Log ""Failed to create cleanup batch file: $($_.Exception.Message)""
        }
    }
}

# Files to remove (single items)
Write-Log ""Removing OneDrive shortcut files and executables""
$filesToRemove = @(
    ""$env:ALLUSERSPROFILE\Users\Default\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\OneDrive.lnk"",
    ""$env:ALLUSERSPROFILE\Users\Default\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\OneDrive.exe"",
    ""$env:PUBLIC\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\OneDrive.lnk"",
    ""$env:PUBLIC\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\OneDrive.exe"",
    ""$env:SystemRoot\System32\OneDriveSetup.exe"",
    ""$env:SystemRoot\SysWOW64\OneDriveSetup.exe"",
    ""$env:LOCALAPPDATA\Microsoft\OneDrive\OneDrive.exe"",
    ""$env:ProgramData\Microsoft\Windows\Start Menu\Programs\OneDrive.lnk""
)

# Remove single files
$filesRemoved = 0
foreach ($file in $filesToRemove) {
    try {
        if (Test-Path $file) {
            Write-Log ""Removing file: $file""
            Remove-Item $file -Force -ErrorAction SilentlyContinue
            if (-not (Test-Path $file)) {
                $filesRemoved++
                Write-Log ""Successfully removed file: $file""
            } else {
                Write-Log ""Failed to remove file: $file""
            }
        }
    }
    catch {
        Write-Log ""Error removing file $file: $($_.Exception.Message)""
        continue
    }
}
Write-Log ""Removed $filesRemoved OneDrive files""

# Folders that need special handling
Write-Log ""Removing OneDrive program folders""
$foldersToRemove = @(
    ""$env:ProgramFiles\Microsoft\OneDrive"",
    ""$env:ProgramFiles\Microsoft OneDrive"",
    ""$env:LOCALAPPDATA\Microsoft\OneDrive""
)

# Remove folders with robust method
$foldersProcessed = 0
foreach ($folder in $foldersToRemove) {
    try {
        Write-Log ""Processing folder: $folder""
        Remove-OneDriveFolder -folderPath $folder
        $foldersProcessed++
    }
    catch {
        Write-Log ""Error in folder removal process for $folder: $($_.Exception.Message)""
        continue
    }
}
Write-Log ""Processed $foldersProcessed OneDrive folders""

# Additional cleanup for stubborn setup files
Write-Log ""Performing additional cleanup for stubborn setup files""
$setupFiles = @(
    ""$env:SystemRoot\SysWOW64\OneDriveSetup.exe"",
    ""$env:SystemRoot\System32\OneDriveSetup.exe""
)

$setupFilesFound = 0
foreach ($file in $setupFiles) {
    try {
        if (Test-Path $file) {
            $setupFilesFound++
            Write-Log ""Found stubborn setup file: $file""
            # Create a batch file to delete the file after a delay
            $batchPath = ""$env:TEMP\RemoveOneDriveSetup_$(Get-Random).bat""
            $batchContent = @""
@echo off
timeout /t 2 /nobreak > nul
del /F /Q ""$file""
del /F /Q ""%~f0""
""@
            Write-Log ""Creating delayed cleanup batch file: $batchPath""
            Set-Content -Path $batchPath -Value $batchContent -Force -ErrorAction SilentlyContinue
            Start-Process ""cmd.exe"" -ArgumentList ""/c $batchPath"" -WindowStyle Hidden -ErrorAction SilentlyContinue
            Write-Log ""Scheduled delayed removal of file: $file""
        }
    }
    catch {
        Write-Log ""Error creating cleanup batch for $file: $($_.Exception.Message)""
        continue
        }
    }
}
";
    }
}
