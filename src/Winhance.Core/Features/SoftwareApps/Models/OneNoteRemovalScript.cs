using System;

namespace Winhance.Core.Features.SoftwareApps.Models;

/// <summary>
/// Provides the PowerShell script content for removing OneNote.
/// </summary>
public static class OneNoteRemovalScript
{
    /// <summary>
    /// Gets the PowerShell script for removing OneNote.
    /// </summary>
    /// <returns>A string containing the PowerShell script.</returns>
    public static string GetScript()
    {
        return @"
# OneNoteRemoval.ps1
# Standalone script to remove Microsoft OneNote
# Source: Winhance (https://github.com/memstechtips/Winhance)

# Generated by Winhance on " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + @"

# Setup logging
$logFolder = ""$env:LOCALAPPDATA\Winhance\Logs""
$logFile = ""$logFolder\OneNoteRemovalLog.txt""

# Create log directory if it doesn't exist
if (!(Test-Path $logFolder)) {
    New-Item -ItemType Directory -Path $logFolder -Force | Out-Null
}

# Function to write to log file
function Write-Log {
    param (
        [string]$Message
    )
    
    $timestamp = Get-Date -Format ""yyyy-MM-dd HH:mm:ss""
    ""$timestamp - $Message"" | Out-File -FilePath $logFile -Append
}

Write-Log ""Starting OneNote removal process""

try {
    # Stop OneNote processes
    Write-Log ""Stopping OneNote processes""
    $processesToStop = @(""OneNote"", ""ONENOTE"", ""ONENOTEM"")
    foreach ($processName in $processesToStop) { 
        $processes = Get-Process -Name $processName -ErrorAction SilentlyContinue
        if ($processes) {
            $processes | Stop-Process -Force -ErrorAction SilentlyContinue
            Write-Log ""Stopped process: $processName""
        } else {
            Write-Log ""Process not running: $processName""
        }
    }
    Start-Sleep -Seconds 1
    Write-Log ""Successfully stopped all OneNote processes""
}
catch {
    Write-Log ""Error stopping OneNote processes: $($_.Exception.Message)""
}

# Remove OneNote AppX package (Windows 10 version)
Write-Log ""Removing OneNote AppX packages""
try {
    $packages = Get-AppxPackage -AllUsers *OneNote*
    if ($packages) {
        $packages | ForEach-Object {
            Write-Log ""Removing AppX package: $($_.Name)""
            $_ | Remove-AppxPackage -ErrorAction SilentlyContinue
        }
        Write-Log ""Successfully removed OneNote AppX packages""
    } else {
        Write-Log ""No OneNote AppX packages found""
    }
}
catch {
    Write-Log ""Error removing OneNote AppX packages: $($_.Exception.Message)""
}

# Check and execute uninstall strings from registry (Windows 11 version)
Write-Log ""Checking registry for OneNote uninstall strings""
$registryPaths = @(
    ""HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\OneNote*"",
    ""HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\OneNote*"",
    ""HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\OneNote*""
)

$uninstallPathsFound = 0
foreach ($regPathPattern in $registryPaths) {
    try {
        Write-Log ""Searching registry path: $regPathPattern""
        $regPaths = Get-ChildItem -Path $regPathPattern -ErrorAction SilentlyContinue
        
        if ($regPaths) {
            foreach ($regPath in $regPaths) {
                Write-Log ""Found registry key: $($regPath.PSPath)""
                $uninstallString = (Get-ItemProperty -Path $regPath.PSPath -ErrorAction SilentlyContinue).UninstallString
                
                if ($uninstallString) {
                    Write-Log ""Found uninstall string: $uninstallString""
                    $uninstallPathsFound++
                    
                    try {
                        if ($uninstallString -match '^\""([^\""]+)\""(.*)$') {
                            $exePath = $matches[1]
                            $args = $matches[2].Trim()
                            Write-Log ""Executing uninstaller: $exePath with args: $args""
                            Start-Process -FilePath $exePath -ArgumentList $args -NoNewWindow -Wait -ErrorAction SilentlyContinue
                            Write-Log ""Uninstaller completed execution""
                        }
                        else {
                            Write-Log ""Executing uninstaller: $uninstallString""
                            Start-Process -FilePath $uninstallString -NoNewWindow -Wait -ErrorAction SilentlyContinue
                            Write-Log ""Uninstaller completed execution""
                        }
                    }
                    catch {
                        Write-Log ""Error executing uninstaller: $($_.Exception.Message)""
                    }
                } else {
                    Write-Log ""No uninstall string found in registry key""
                }
            }
        } else {
            Write-Log ""No matching registry keys found in $regPathPattern""
        }
    }
    catch {
        Write-Log ""Error accessing registry path $regPathPattern: $($_.Exception.Message)""
        continue
    }
}

if ($uninstallPathsFound -eq 0) {
    Write-Log ""No OneNote uninstall strings found in registry""
} else {
    Write-Log ""Processed $uninstallPathsFound uninstall strings from registry""
}

# Try to uninstall using the Office setup
Write-Log ""Attempting to uninstall OneNote using Office setup""
$officeUninstallPaths = @(
    ""$env:ProgramFiles\Microsoft Office\Office16\setup.exe"",
    ""$env:ProgramFiles\Microsoft Office\root\Office16\setup.exe"",
    ""$env:ProgramFiles(x86)\Microsoft Office\Office16\setup.exe"",
    ""$env:ProgramFiles(x86)\Microsoft Office\root\Office16\setup.exe""
)

$setupFound = $false
foreach ($path in $officeUninstallPaths) {
    try {
        if (Test-Path $path) {
            $setupFound = $true
            Write-Log ""Found Office setup at: $path""
            Write-Log ""Running Office setup to uninstall OneNote""
            Start-Process -FilePath $path -ArgumentList ""/uninstall OneNote /config OneNoteRemoval.xml"" -NoNewWindow -Wait -ErrorAction SilentlyContinue
            Write-Log ""Office setup uninstall process completed""
        }
    }
    catch {
        Write-Log ""Error running Office setup uninstaller: $($_.Exception.Message)""
        continue
    }
}

if (-not $setupFound) {
    Write-Log ""No Office setup executables found for uninstallation""
}

# Remove OneNote scheduled tasks
Write-Log ""Removing OneNote scheduled tasks""
try {
    $tasks = Get-ScheduledTask -ErrorAction SilentlyContinue | 
            Where-Object { $_.TaskName -match 'OneNote' -and $_.TaskName -ne 'OneNoteRemoval' }
    
    if ($tasks) {
        $taskCount = 0
        foreach ($task in $tasks) {
            try {
                Write-Log ""Removing scheduled task: $($task.TaskName)""
                Unregister-ScheduledTask -TaskName $task.TaskName -Confirm:$false -ErrorAction SilentlyContinue
                $taskCount++
            }
            catch {
                Write-Log ""Error removing scheduled task $($task.TaskName): $($_.Exception.Message)""
            }
        }
        Write-Log ""Removed $taskCount OneNote scheduled tasks""
    } else {
        Write-Log ""No OneNote scheduled tasks found""
    }
}
catch {
    Write-Log ""Error accessing scheduled tasks: $($_.Exception.Message)""
}

# Remove OneNote from startup
Write-Log ""Removing OneNote from startup registry""
try {
    $regPath = ""HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run""
    if (Test-Path $regPath) {
        $properties = Get-ItemProperty -Path $regPath -ErrorAction SilentlyContinue
        $oneNoteEntries = $properties.PSObject.Properties | 
                          Where-Object { $_.Name -like 'OneNote*' }
        
        if ($oneNoteEntries) {
            $entriesRemoved = 0
            foreach ($entry in $oneNoteEntries) {
                try {
                    Write-Log ""Removing startup entry: $($entry.Name)""
                    Remove-ItemProperty -Path $regPath -Name $entry.Name -ErrorAction SilentlyContinue
                    $entriesRemoved++
                }
                catch {
                    Write-Log ""Error removing startup entry $($entry.Name): $($_.Exception.Message)""
                }
            }
            Write-Log ""Removed $entriesRemoved OneNote startup entries""
        } else {
            Write-Log ""No OneNote startup entries found in registry""
        }
    }
}
catch {
    Write-Log ""Error accessing startup registry: $($_.Exception.Message)""
}

# Files to remove (single items)
Write-Log ""Removing OneNote shortcut files""
$filesToRemove = @(
    ""$env:ProgramData\Microsoft\Windows\Start Menu\Programs\OneNote.lnk"",
    ""$env:PUBLIC\Desktop\OneNote.lnk""
)

# Remove single files
$filesRemoved = 0
foreach ($file in $filesToRemove) {
    try {
        if (Test-Path $file) {
            Write-Log ""Removing file: $file""
            Remove-Item $file -Force -ErrorAction SilentlyContinue
            $filesRemoved++
        }
    }
    catch {
        Write-Log ""Error removing file $file: $($_.Exception.Message)""
        continue
    }
}
Write-Log ""Removed $filesRemoved OneNote shortcut files""

# Folders that need special handling
Write-Log ""Removing OneNote program folders""
$foldersToRemove = @(
    ""$env:ProgramFiles\Microsoft\OneNote"",
    ""$env:ProgramFiles(x86)\Microsoft\OneNote"",
    ""$env:LOCALAPPDATA\Microsoft\OneNote""
)

# Remove folders
$foldersRemoved = 0
foreach ($folder in $foldersToRemove) {
    try {
        if (Test-Path $folder) {
            Write-Log ""Removing folder: $folder""
            Remove-Item -Path $folder -Force -Recurse -ErrorAction SilentlyContinue
            $foldersRemoved++
        }
    }
    catch {
        Write-Log ""Error removing folder $folder: $($_.Exception.Message)""
        continue
    }
}
Write-Log ""Removed $foldersRemoved OneNote program folders""

# Clean up per-user OneNote shortcuts
Write-Log ""Cleaning up OneNote shortcuts from user profiles""
$userProfiles = Get-ChildItem -Path ""C:\Users"" -Directory | Where-Object { 
    $_.Name -notin @('Public', 'Default', 'Default User', 'All Users') -and 
    (Test-Path -Path ""$($_.FullName)\NTUSER.DAT"")
}

if ($userProfiles) {
    Write-Log ""Found $($userProfiles.Count) user profiles to clean""
    $totalShortcutsRemoved = 0
    
    foreach ($profile in $userProfiles) {
        $userProfilePath = $profile.FullName
        $userShortcutsRemoved = 0
        Write-Log ""Processing user profile: $($profile.Name)""
        
        # Define user-specific paths to clean
        $oneNoteShortcutPaths = @(
            ""$userProfilePath\Desktop\OneNote.lnk"",
            ""$userProfilePath\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\OneNote.lnk""
        )

        # Remove OneNote shortcuts for each user
        foreach ($path in $oneNoteShortcutPaths) {
            try {
                if (Test-Path -Path $path -PathType Leaf) {
                    Write-Log ""Removing user shortcut: $path""
                    Remove-Item -Path $path -Force -ErrorAction SilentlyContinue
                    $userShortcutsRemoved++
                    $totalShortcutsRemoved++
                }
            }
            catch {
                Write-Log ""Error removing user shortcut $path: $($_.Exception.Message)""
            }
        }
        
        Write-Log ""Removed $userShortcutsRemoved shortcuts for user $($profile.Name)""
    }
    
    Write-Log ""Total user shortcuts removed: $totalShortcutsRemoved""
} else {
    Write-Log ""No user profiles found for cleanup""
}

Write-Log ""OneNote removal process completed""
";
    }
}