using System;

namespace Winhance.Core.Features.SoftwareApps.Models;

/// <summary>
/// Provides the PowerShell script content for removing Microsoft Edge.
/// </summary>
public static class EdgeRemovalScript
{
    /// <summary>
    /// Gets the PowerShell script for removing Microsoft Edge.
    /// </summary>
    /// <returns>A string containing the PowerShell script.</returns>
    public static string GetScript()
    {
        return @"
# EdgeRemoval.ps1
# Standalone script to remove Microsoft Edge
# Source: Winhance (https://github.com/memstechtips/Winhance)

# Generated by Winhance on "
            + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")
            + @"

# Setup logging
$logFolder = ""$env:LOCALAPPDATA\Winhance\Logs""
$logFile = ""$logFolder\EdgeRemovalLog.txt""

# Create log directory if it doesn't exist
if (!(Test-Path $logFolder)) {
    New-Item -ItemType Directory -Path $logFolder -Force | Out-Null
}

# Function to write to log file
function Write-Log {
    param (
        [string]$Message
    )
    
    $timestamp = Get-Date -Format ""yyyy-MM-dd HH:mm:ss""
    ""$timestamp - $Message"" | Out-File -FilePath $logFile -Append
}

Write-Log ""Starting Edge removal process""

# stop edge running
Write-Log ""Stopping Edge-related processes""
$stop = ""MicrosoftEdgeUpdate"", ""OneDrive"", ""WidgetService"", ""Widgets"", ""msedge"", ""msedgewebview2""
$stop | ForEach-Object { 
    try {
        Stop-Process -Name $_ -Force -ErrorAction SilentlyContinue
        Write-Log ""Stopped process: $_""
    }
    catch {
        Write-Log ""Failed to stop process: $_""
    }
}
# uninstall copilot
Write-Log ""Removing Copilot AppX package""
try {
    Get-AppxPackage -allusers *Microsoft.Windows.Ai.Copilot.Provider* | Remove-AppxPackage
    Write-Log ""Successfully removed Copilot package""
}
catch {
    Write-Log ""Failed to remove Copilot package: $($_.Exception.Message)""
}

# disable edge updates regedit
Write-Log ""Configuring registry to disable Edge updates""
try {
    reg add ""HKLM\SOFTWARE\Microsoft\EdgeUpdate"" /v ""DoNotUpdateToEdgeWithChromium"" /t REG_DWORD /d ""1"" /f | Out-Null
    Write-Log ""Successfully configured EdgeUpdate registry key""
}
catch {
    Write-Log ""Failed to configure EdgeUpdate registry key: $($_.Exception.Message)""
}

# allow edge uninstall regedit
Write-Log ""Configuring registry to allow Edge uninstallation""
try {
    reg add ""HKLM\SOFTWARE\WOW6432Node\Microsoft\EdgeUpdateDev"" /v ""AllowUninstall"" /t REG_SZ /f | Out-Null
    Write-Log ""Successfully configured EdgeUpdateDev registry key""
}
catch {
    Write-Log ""Failed to configure EdgeUpdateDev registry key: $($_.Exception.Message)""
}
# new folder to uninstall edge
Write-Log ""Creating directory for Edge uninstallation""
try {
    New-Item -Path ""$env:SystemRoot\SystemApps\Microsoft.MicrosoftEdge_8wekyb3d8bbwe"" -ItemType Directory -ErrorAction SilentlyContinue | Out-Null
    Write-Log ""Successfully created Edge directory""
}
catch {
    Write-Log ""Failed to create Edge directory: $($_.Exception.Message)""
}

# new file to uninstall edge
Write-Log ""Creating Edge executable file""
try {
    New-Item -Path ""$env:SystemRoot\SystemApps\Microsoft.MicrosoftEdge_8wekyb3d8bbwe"" -ItemType File -Name ""MicrosoftEdge.exe"" -ErrorAction SilentlyContinue | Out-Null
    Write-Log ""Successfully created Edge executable file""
}
catch {
    Write-Log ""Failed to create Edge executable file: $($_.Exception.Message)""
}
# find edge uninstall string
Write-Log ""Finding Edge uninstall string from registry""
try {
    $regview = [Microsoft.Win32.RegistryView]::Registry32
    $microsoft = [Microsoft.Win32.RegistryKey]::OpenBaseKey([Microsoft.Win32.RegistryHive]::LocalMachine, $regview).
    OpenSubKey(""SOFTWARE\Microsoft"", $true)
    $uninstallregkey = $microsoft.OpenSubKey(""Windows\CurrentVersion\Uninstall\Microsoft Edge"")
    
    if ($uninstallregkey -ne $null) {
        $uninstallstring = $uninstallregkey.GetValue(""UninstallString"") + "" --force-uninstall""
        Write-Log ""Found Edge uninstall string: $uninstallstring""
    } else {
        Write-Log ""Edge uninstall registry key not found""
    }
}
catch {
    Write-Log ""Failed to retrieve Edge uninstall string: $($_.Exception.Message)""
}
# uninstall edge
Write-Log ""Running Edge uninstaller""
try {
    if ($uninstallstring) {
        Start-Process cmd.exe ""/c $uninstallstring"" -WindowStyle Hidden -Wait
        Write-Log ""Edge uninstallation process completed""
    } else {
        Write-Log ""Skipping Edge uninstallation - no uninstall string found""
    }
}
catch {
    Write-Log ""Failed to run Edge uninstaller: $($_.Exception.Message)""
}

# remove folder file
Write-Log ""Removing Edge directory""
try {
    Remove-Item -Recurse -Force ""$env:SystemRoot\SystemApps\Microsoft.MicrosoftEdge_8wekyb3d8bbwe"" -ErrorAction SilentlyContinue | Out-Null
    Write-Log ""Successfully removed Edge directory""
}
catch {
    Write-Log ""Failed to remove Edge directory: $($_.Exception.Message)""
}
# find edgeupdate.exe
Write-Log ""Searching for EdgeUpdate executables""
try {
    $edgeupdate = @(); ""LocalApplicationData"", ""ProgramFilesX86"", ""ProgramFiles"" | ForEach-Object {
        $folder = [Environment]::GetFolderPath($_)
        $edgeupdate += Get-ChildItem ""$folder\Microsoft\EdgeUpdate\*.*.*.*\MicrosoftEdgeUpdate.exe"" -rec -ea 0
    }
    
    if ($edgeupdate.Count -gt 0) {
        Write-Log ""Found $($edgeupdate.Count) EdgeUpdate executables""
    } else {
        Write-Log ""No EdgeUpdate executables found""
    }
}
catch {
    Write-Log ""Error searching for EdgeUpdate executables: $($_.Exception.Message)""
}

# find edgeupdate & allow uninstall regedit
Write-Log ""Removing EdgeUpdate registry keys""
try {
    $global:REG = ""HKCU:\SOFTWARE"", ""HKLM:\SOFTWARE"", ""HKCU:\SOFTWARE\Policies"", ""HKLM:\SOFTWARE\Policies"", ""HKCU:\SOFTWARE\WOW6432Node"", ""HKLM:\SOFTWARE\WOW6432Node"", ""HKCU:\SOFTWARE\WOW6432Node\Policies"", ""HKLM:\SOFTWARE\WOW6432Node\Policies""
    foreach ($location in $REG) { 
        if (Test-Path ""$location\Microsoft\EdgeUpdate"") {
            Remove-Item ""$location\Microsoft\EdgeUpdate"" -recurse -force -ErrorAction SilentlyContinue 
            Write-Log ""Removed EdgeUpdate registry key at $location""
        }
    }
}
catch {
    Write-Log ""Error removing EdgeUpdate registry keys: $($_.Exception.Message)""
}
# uninstall edgeupdate
Write-Log ""Starting EdgeUpdate uninstallation""
foreach ($path in $edgeupdate) {
    try {
        if (Test-Path $path) { 
            Write-Log ""Unregistering EdgeUpdate service from $path""
            Start-Process -Wait $path -Args ""/unregsvc"" | Out-Null 
            Write-Log ""Successfully unregistered EdgeUpdate service""
        }
        
        # Wait for any Edge processes to complete
        Write-Log ""Waiting for Edge processes to finish""
        do { Start-Sleep 3 } while ((Get-Process -Name ""setup"", ""MicrosoftEdge*"" -ErrorAction SilentlyContinue).Path -like ""*\Microsoft\Edge*"")
        
        if (Test-Path $path) { 
            Write-Log ""Uninstalling EdgeUpdate from $path""
            Start-Process -Wait $path -Args ""/uninstall"" | Out-Null 
            Write-Log ""Successfully uninstalled EdgeUpdate""
        }
        
        # Wait for any Edge processes to complete
        Write-Log ""Waiting for Edge processes to finish""
        do { Start-Sleep 3 } while ((Get-Process -Name ""setup"", ""MicrosoftEdge*"" -ErrorAction SilentlyContinue).Path -like ""*\Microsoft\Edge*"")
    }
    catch {
        Write-Log ""Error during EdgeUpdate uninstallation: $($_.Exception.Message)""
    }
}
# remove edgewebview regedit
Write-Log ""Removing EdgeWebView registry keys""
try {
    cmd /c ""reg delete `""HKLM\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\Microsoft EdgeWebView`"" /f >nul 2>&1""
    cmd /c ""reg delete `""HKCU\Software\Microsoft\Windows\CurrentVersion\Uninstall\Microsoft EdgeWebView`"" /f >nul 2>&1""
    Write-Log ""Successfully removed EdgeWebView registry keys""
}
catch {
    Write-Log ""Error removing EdgeWebView registry keys: $($_.Exception.Message)""
}

# remove folders edge edgecore edgeupdate edgewebview temp
Write-Log ""Removing Microsoft folders""
try {
    Remove-Item -Recurse -Force ""$env:SystemDrive\Program Files (x86)\Microsoft"" -ErrorAction SilentlyContinue | Out-Null
    Write-Log ""Successfully removed Microsoft folders""
}
catch {
    Write-Log ""Error removing Microsoft folders: $($_.Exception.Message)""
}

# remove edge shortcuts
Write-Log ""Removing Edge shortcuts from system locations""
try {
    Remove-Item -Recurse -Force ""$env:SystemDrive\Windows\System32\config\systemprofile\AppData\Roaming\Microsoft\Internet Explorer\Quick Launch\Microsoft Edge.lnk"" -ErrorAction SilentlyContinue | Out-Null
    Remove-Item -Recurse -Force ""$env:ProgramData\Microsoft\Windows\Start Menu\Programs\Microsoft Edge.lnk"" -ErrorAction SilentlyContinue | Out-Null
    Write-Log ""Successfully removed Edge shortcuts from system locations""
}
catch {
    Write-Log ""Error removing Edge shortcuts: $($_.Exception.Message)""
}

Write-Log ""Identifying user profiles for Edge shortcut cleanup""
try {
    $fileSystemProfiles = Get-ChildItem -Path ""C:\Users"" -Directory | Where-Object { 
        $_.Name -notin @('Public', 'Default', 'Default User', 'All Users') -and 
        (Test-Path -Path ""$($_.FullName)\NTUSER.DAT"")
    }
    
    Write-Log ""Found $($fileSystemProfiles.Count) user profiles to process""
    
    # Loop through each user profile and clean up Edge shortcuts
    foreach ($profile in $fileSystemProfiles) {
        $userProfilePath = $profile.FullName
        Write-Log ""Processing user profile: $userProfilePath""
        
        # Define user-specific paths to clean
        $edgeShortcutPaths = @(
            ""$userProfilePath\AppData\Roaming\Microsoft\Internet Explorer\Quick Launch\Microsoft Edge.lnk"",
            ""$userProfilePath\Desktop\Microsoft Edge.lnk"",
            ""$userProfilePath\AppData\Roaming\Microsoft\Internet Explorer\Quick Launch\User Pinned\TaskBar\Microsoft Edge.lnk"",
            ""$userProfilePath\AppData\Roaming\Microsoft\Internet Explorer\Quick Launch\User Pinned\TaskBar\Tombstones\Microsoft Edge.lnk"",
            ""$userProfilePath\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Microsoft Edge.lnk""
        )

        $removedCount = 0
        # Remove Edge shortcuts for each user
        foreach ($path in $edgeShortcutPaths) {
            if (Test-Path -Path $path -PathType Leaf) {
                try {
                    Remove-Item -Path $path -Force -ErrorAction SilentlyContinue
                    $removedCount++
                }
                catch {
                    Write-Log ""Failed to remove shortcut at $path: $($_.Exception.Message)""
                }
            }
        }
        
        Write-Log ""Removed $removedCount Edge shortcuts for user profile: $userProfilePath""
    }
}
catch {
    Write-Log ""Error during user profile cleanup: $($_.Exception.Message)""
}

# Clean up common locations
Write-Log ""Cleaning up Edge shortcuts from common locations""
try {
    $commonShortcutPaths = @(
        ""$env:PUBLIC\Desktop\Microsoft Edge.lnk"",
        ""$env:ALLUSERSPROFILE\Microsoft\Windows\Start Menu\Programs\Microsoft Edge.lnk"",
        ""C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Microsoft Edge.lnk""
    )

    $removedCount = 0
    foreach ($path in $commonShortcutPaths) {
        if (Test-Path -Path $path -PathType Leaf) {
            try {
                Remove-Item -Path $path -Force -ErrorAction SilentlyContinue
                $removedCount++
                Write-Log ""Removed shortcut: $path""
            }
            catch {
                Write-Log ""Failed to remove shortcut at $path: $($_.Exception.Message)""
            }
        }
    }
    
    Write-Log ""Removed $removedCount Edge shortcuts from common locations""
}
catch {
    Write-Log ""Error cleaning up common shortcuts: $($_.Exception.Message)""
}

# Removes Edge in Task Manager Startup Apps for All Users
Write-Log ""Removing Edge from startup apps for all users""
try {
    # Get all user profiles on the system
    $userProfiles = Get-CimInstance -ClassName Win32_UserProfile | 
    Where-Object { -not $_.Special -and $_.SID -notmatch 'S-1-5-18|S-1-5-19|S-1-5-20' }
    
    Write-Log ""Found $($userProfiles.Count) user profiles to process for startup app cleanup""
    
    foreach ($profile in $userProfiles) {
        $sid = $profile.SID
        $hiveLoaded = $false
        
        try {
            if (-not (Test-Path ""Registry::HKEY_USERS\$sid"")) {
                $userRegPath = Join-Path $profile.LocalPath ""NTUSER.DAT""
                if (Test-Path $userRegPath) {
                    Write-Log ""Loading registry hive for user SID: $sid""
                    reg load ""HKU\$sid"" $userRegPath | Out-Null
                    $hiveLoaded = $true
                    Start-Sleep -Seconds 2
                }
            }
            
            $runKeyPath = ""Registry::HKEY_USERS\$sid\Software\Microsoft\Windows\CurrentVersion\Run""
            
            if (Test-Path $runKeyPath) {
                $properties = Get-ItemProperty -Path $runKeyPath
                $edgeEntries = $properties.PSObject.Properties | 
                Where-Object { $_.Name -like 'MicrosoftEdgeAutoLaunch*' }
                
                $entriesRemoved = 0
                foreach ($entry in $edgeEntries) {
                    try {
                        Remove-ItemProperty -Path $runKeyPath -Name $entry.Name -Force
                        $entriesRemoved++
                    }
                    catch {
                        Write-Log ""Failed to remove startup entry $($entry.Name): $($_.Exception.Message)""
                    }
                }
                
                if ($entriesRemoved -gt 0) {
                    Write-Log ""Removed $entriesRemoved Edge startup entries for user SID: $sid""
                }
            }
        }
        catch {
            Write-Log ""Error processing registry for user SID $sid: $($_.Exception.Message)""
        }
        finally {
            if ($hiveLoaded) {
                Write-Log ""Unloading registry hive for user SID: $sid""
                [gc]::Collect()
                Start-Sleep -Seconds 2
                reg unload ""HKU\$sid"" | Out-Null
            }
        }
    }
    
    Write-Log ""Completed Edge startup app cleanup for all users""
}
catch {
    Write-Log ""Error during startup app cleanup: $($_.Exception.Message)""
}

Write-Log ""Edge removal process completed""

";
    }
}
